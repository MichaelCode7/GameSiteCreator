[
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "orm",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.orm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "TextAreaField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "importPath": "forms.user",
        "description": "forms.user",
        "isExtraImport": true,
        "detail": "forms.user",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "forms.user",
        "description": "forms.user",
        "isExtraImport": true,
        "detail": "forms.user",
        "documentation": {}
    },
    {
        "label": "db_session",
        "importPath": "data",
        "description": "data",
        "isExtraImport": true,
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "db_session",
        "importPath": "data",
        "description": "data",
        "isExtraImport": true,
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "data.users",
        "description": "data.users",
        "isExtraImport": true,
        "detail": "data.users",
        "documentation": {}
    },
    {
        "label": "News",
        "importPath": "data.news",
        "description": "data.news",
        "isExtraImport": true,
        "detail": "data.news",
        "documentation": {}
    },
    {
        "label": "News",
        "importPath": "data.news",
        "description": "data.news",
        "isExtraImport": true,
        "detail": "data.news",
        "documentation": {}
    },
    {
        "label": "GeneralFuncs",
        "importPath": "general_funcs",
        "description": "general_funcs",
        "isExtraImport": true,
        "detail": "general_funcs",
        "documentation": {}
    },
    {
        "label": "GeneralFuncs",
        "importPath": "general_funcs",
        "description": "general_funcs",
        "isExtraImport": true,
        "detail": "general_funcs",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "general_vars",
        "description": "general_vars",
        "isExtraImport": true,
        "detail": "general_vars",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "general_vars",
        "description": "general_vars",
        "isExtraImport": true,
        "detail": "general_vars",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "global_init",
        "kind": 2,
        "importPath": "data.db_session",
        "description": "data.db_session",
        "peekOfCode": "def global_init(db_file):\n    global __factory\n    if __factory:\n        return\n    if not db_file or not db_file.strip():\n        raise Exception(\"Необходимо указать файл базы данных.\")\n    conn_str = f'sqlite:///{db_file.strip()}?check_same_thread=False'\n    print(f\"Подключение к базе данных по адресу {conn_str}\")\n    engine = sa.create_engine(conn_str, echo=False)\n    __factory = orm.sessionmaker(bind=engine)",
        "detail": "data.db_session",
        "documentation": {}
    },
    {
        "label": "create_session",
        "kind": 2,
        "importPath": "data.db_session",
        "description": "data.db_session",
        "peekOfCode": "def create_session() -> Session:\n    global __factory\n    return __factory()",
        "detail": "data.db_session",
        "documentation": {}
    },
    {
        "label": "SqlAlchemyBase",
        "kind": 5,
        "importPath": "data.db_session",
        "description": "data.db_session",
        "peekOfCode": "SqlAlchemyBase = orm.declarative_base()\n__factory = None\ndef global_init(db_file):\n    global __factory\n    if __factory:\n        return\n    if not db_file or not db_file.strip():\n        raise Exception(\"Необходимо указать файл базы данных.\")\n    conn_str = f'sqlite:///{db_file.strip()}?check_same_thread=False'\n    print(f\"Подключение к базе данных по адресу {conn_str}\")",
        "detail": "data.db_session",
        "documentation": {}
    },
    {
        "label": "__factory",
        "kind": 5,
        "importPath": "data.db_session",
        "description": "data.db_session",
        "peekOfCode": "__factory = None\ndef global_init(db_file):\n    global __factory\n    if __factory:\n        return\n    if not db_file or not db_file.strip():\n        raise Exception(\"Необходимо указать файл базы данных.\")\n    conn_str = f'sqlite:///{db_file.strip()}?check_same_thread=False'\n    print(f\"Подключение к базе данных по адресу {conn_str}\")\n    engine = sa.create_engine(conn_str, echo=False)",
        "detail": "data.db_session",
        "documentation": {}
    },
    {
        "label": "News",
        "kind": 6,
        "importPath": "data.news",
        "description": "data.news",
        "peekOfCode": "class News(SqlAlchemyBase):\n    __tablename__ = 'news'\n    id = sqlalchemy.Column(sqlalchemy.Integer, \n                           primary_key=True, autoincrement=True)\n    title = sqlalchemy.Column(sqlalchemy.String, nullable=True)\n    content = sqlalchemy.Column(sqlalchemy.String, nullable=True)\n    created_date = sqlalchemy.Column(sqlalchemy.DateTime, \n                                     default=datetime.datetime.now)\n    last_update_date = sqlalchemy.Column(sqlalchemy.DateTime, \n                                     default=datetime.datetime.now)",
        "detail": "data.news",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "data.users",
        "description": "data.users",
        "peekOfCode": "class User(SqlAlchemyBase, UserMixin):\n    __tablename__ = 'users'\n    id = sqlalchemy.Column(sqlalchemy.Integer, primary_key=True, autoincrement=True)\n    name = sqlalchemy.Column(sqlalchemy.String, nullable=True)\n    about = sqlalchemy.Column(sqlalchemy.String, nullable=True)\n    email = sqlalchemy.Column(sqlalchemy.String, index=True, unique=True, nullable=True)\n    hashed_password = sqlalchemy.Column(sqlalchemy.String, nullable=True)\n    created_date = sqlalchemy.Column(sqlalchemy.DateTime, default=datetime.datetime.now)\n    last_login_date = sqlalchemy.Column(sqlalchemy.DateTime, default=datetime.datetime.now)\n    def set_password(self, password):",
        "detail": "data.users",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "kind": 6,
        "importPath": "forms.user",
        "description": "forms.user",
        "peekOfCode": "class RegisterForm(FlaskForm):\n    email = EmailField('Почта', validators=[DataRequired()])\n    password = PasswordField('Пароль', validators=[DataRequired()])\n    password_again = PasswordField('Повторите пароль', validators=[DataRequired()])\n    name = StringField('Имя пользователя', validators=[DataRequired()])\n    about = TextAreaField(\"Немного о себе\")\n    submit = SubmitField('Зарегистрироваться')\nclass LoginForm(FlaskForm):\n    email = EmailField('Почта', validators=[DataRequired()])\n    password = PasswordField('Пароль', validators=[DataRequired()])",
        "detail": "forms.user",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "forms.user",
        "description": "forms.user",
        "peekOfCode": "class LoginForm(FlaskForm):\n    email = EmailField('Почта', validators=[DataRequired()])\n    password = PasswordField('Пароль', validators=[DataRequired()])\n    remember_me = BooleanField('Запомнить меня')\n    submit = SubmitField('Войти')",
        "detail": "forms.user",
        "documentation": {}
    },
    {
        "label": "GeneralFuncs",
        "kind": 6,
        "importPath": "general_funcs",
        "description": "general_funcs",
        "peekOfCode": "class GeneralFuncs: \n    def get_form_json(path, key=None):\n        with open(path, 'r') as jsonf:\n            jsond = json.loads(jsonf.read())\n            if key != \"\" or key != None:\n                return jsond[key]\n            return jsond",
        "detail": "general_funcs",
        "documentation": {}
    },
    {
        "label": "json_info_f",
        "kind": 5,
        "importPath": "general_vars",
        "description": "general_vars",
        "peekOfCode": "json_info_f = 'db/text_data/info.json'",
        "detail": "general_vars",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def load_user(user_id):\n    db_sess = db_session.create_session()\n    return db_sess.query(User).get(user_id)\ndef main():\n    db_session.global_init(\"db/gshopdata.db\")\n    app.run()\n@app.route(\"/about\")\ndef about():\n    params = gf.get_form_json(json_info_f, key=\"about_info\")\n    return render_template('about.html', **params)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    db_session.global_init(\"db/gshopdata.db\")\n    app.run()\n@app.route(\"/about\")\ndef about():\n    params = gf.get_form_json(json_info_f, key=\"about_info\")\n    return render_template('about.html', **params)\n@app.route(\"/\")\ndef index():\n    if current_user.is_authenticated:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def about():\n    params = gf.get_form_json(json_info_f, key=\"about_info\")\n    return render_template('about.html', **params)\n@app.route(\"/\")\ndef index():\n    if current_user.is_authenticated:\n        db_sess = db_session.create_session()\n        return render_template(\"index.html\", title=\"Главная\")\n    else:\n        return redirect('/about')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def index():\n    if current_user.is_authenticated:\n        db_sess = db_session.create_session()\n        return render_template(\"index.html\", title=\"Главная\")\n    else:\n        return redirect('/about')\n@app.route('/register', methods=['GET', 'POST'])\ndef reqister():\n    form = RegisterForm()\n    if form.validate_on_submit():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "reqister",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def reqister():\n    form = RegisterForm()\n    if form.validate_on_submit():\n        if form.password.data != form.password_again.data:\n            return render_template('register.html', title='Регистрация',\n                                   form=form,\n                                   message=\"Пароли не совпадают\")\n        db_sess = db_session.create_session()\n        if db_sess.query(User).filter(User.email == form.email.data).first():\n            return render_template('register.html', title='Регистрация',",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def login():\n    form = LoginForm()\n    if form.validate_on_submit():\n        db_sess = db_session.create_session()\n        user = db_sess.query(User).filter(User.email == form.email.data).first()\n        if user and user.check_password(form.password.data):\n            login_user(user, remember=form.remember_me.data)\n            user.last_login_date = datetime.datetime.now()\n            db_sess.commit()\n            return redirect(\"/\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def logout():\n    logout_user()\n    return redirect(\"/\")\n@app.route('/news',  methods=['GET', 'POST'])\n@login_required\ndef news():\n    return render_template('news.html', title='Новости')\nif __name__ == '__main__':\n    main()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "news",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def news():\n    return render_template('news.html', title='Новости')\nif __name__ == '__main__':\n    main()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = Flask(__name__)\napp.config['SECRET_KEY'] = 'super_secret_key'\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\n@login_manager.user_loader\ndef load_user(user_id):\n    db_sess = db_session.create_session()\n    return db_sess.query(User).get(user_id)\ndef main():\n    db_session.global_init(\"db/gshopdata.db\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app.config['SECRET_KEY'] = 'super_secret_key'\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\n@login_manager.user_loader\ndef load_user(user_id):\n    db_sess = db_session.create_session()\n    return db_sess.query(User).get(user_id)\ndef main():\n    db_session.global_init(\"db/gshopdata.db\")\n    app.run()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "login_manager = LoginManager()\nlogin_manager.init_app(app)\n@login_manager.user_loader\ndef load_user(user_id):\n    db_sess = db_session.create_session()\n    return db_sess.query(User).get(user_id)\ndef main():\n    db_session.global_init(\"db/gshopdata.db\")\n    app.run()\n@app.route(\"/about\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "add_news",
        "kind": 2,
        "importPath": "news_redactor",
        "description": "news_redactor",
        "peekOfCode": "def add_news():\n    db_sess = db_session.create_session()\n    print('Синтаксис новости:\\nЗаголовок\\nКонтент')\n    arr = list(map(lambda x: x.strip(), sys.stdin))\n    if len(arr) > 2:\n        print('Синтаксическая ошибка!')\n        return\n    news = News()\n    news.title, news.content = arr\n    db_sess.add(news)",
        "detail": "news_redactor",
        "documentation": {}
    },
    {
        "label": "edit_news",
        "kind": 2,
        "importPath": "news_redactor",
        "description": "news_redactor",
        "peekOfCode": "def edit_news():\n    db_sess = db_session.create_session()\n    news_id = int(input('Введите id изменяемой новости: '))\n    news = db_sess.query(News).filter(News.id == news_id).first()\n    if news:\n        print('Синтаксис новости:\\nЗаголовок\\nКонтент')\n        arr = list(map(lambda x: x.strip(), sys.stdin))\n        if len(arr) > 2:\n            print('Синтаксическая ошибка!')\n            return",
        "detail": "news_redactor",
        "documentation": {}
    },
    {
        "label": "news_delete",
        "kind": 2,
        "importPath": "news_redactor",
        "description": "news_redactor",
        "peekOfCode": "def news_delete():\n    db_sess = db_session.create_session()\n    news_id = int(input('Введите id удаляемой новости: '))\n    news = db_sess.query(News).filter(News.id == news_id).first()\n    if news:\n        db_sess.delete(news)\n        db_sess.commit()\n        return f'Новость с id {news_id} успешно удалена!'\n    else:\n        return 'Такой записи нет в базе!'",
        "detail": "news_redactor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "news_redactor",
        "description": "news_redactor",
        "peekOfCode": "def main():\n    db_session.global_init(\"db/gshopdata.db\")\n    while True:\n        answ = input('''Выберите один из предложенных вариантов:\\n1 - добавить новость.\n2 - изменить новость.\\n3 - удалить новость.\\n4 - выход.\\n''')\n        match answ:\n            case '1':\n                print(add_news())\n            case '2':\n                print(edit_news())",
        "detail": "news_redactor",
        "documentation": {}
    }
]